
[[_functional_tests_automation]]
== Tests Automation

This section explains how to automate test cases for Anypoint MuleSoft Connectors. Tests are _Functional Tests_, _System Tests_ or _Unit Tests_ depending which aspect of the connector is being tested.

Functional tests aim at testing the connector with a particular Mule runtime environment, thus assuring backward and forward compatibility. System tests group those aspects were a connection is needed but no underlying Mule runtime is required, such as when testing valid/invalid credentials or different connection configurations. Finally, unit tests aim at verifying isolated components, or units, of the connector which do not require a valid connection nor a Mule runtime.

Once all tests have been engineered, a final test execution step is required. This execution step requires to run functional tests with different Mule runtimes configurations, run System tests with valid/invalid credentials and finally run unit tests.

=== How to Start?

There are different aspects to tests:

1. *Processors:* For each processor, a functional test is required.
2. *MetaData:* MetaData requires functional tests as well, but employing a slightly different approach than processors.
3. *Pagination:* If the connector implements @Paged processors, then pagination has to be tested.
4. *Test Connectivity:* Every connection configuration has to be tested with valid/invalid credentials, wrong configuration values, etc.
5. *WSDL Operations:* Testing WSDL operations is required *ONLY* when your connector is SOAP Connect. As with MetaData, testing these kind of operations require a different approach than processors.

For functional tests, DevKit Plugin generates functional tests scaffolding, as explained https://developer.mulesoft.com/docs/display/current/Developing+DevKit+Connector+Tests[here]. This scaffolding generates a functional test per available processor, which covers the functional testing part. System and Unit tests need to be written entirely from scratch.

=== Best Practices

Before starting, there are a few best practices when engineering test cases:

1. Always clean the connector sandbox after running either Functional or System tests.
2. *setup():* If @Before behavior is required, this method must be defined and annotated accordingly.
3. *tearDown():* If @After behavior is required, this method must be defined and annotated accordingly. Normally all _cleaning behaviour_ regarding the sandbox should go here.
4. *.gitignore:* Automations credentials and any sensitive data should be added to this file to avoid any mistake when committing the connector project.

=== Functional Tests

Functional tests aim at assuring the correct behavior of the connector within a particular Mule runtime environment, particular testing how well the connector integrates with Mule architecture.

Functional testing is a _mandatory_ step within the certification process and need to be carried out following strict practices, who are detailed throughout this section.

include::sections/0-intro.asc[]

include::sections/2-framework-testsuite-components.asc[]

include::sections/3-topics-to-test.asc[]

=== System Tests

This category must group all those tests that *required a connection*. All those tests that are not functional, but require a connection must go within this category.

==== Test Organization

System tests need to be engineered and organized as follows:

. *Test Suites:* _org.mule.modules.<connector-project>.automation.runner.SystemTestSuite_ groups all System tests with no exception. In case two or more test suites are required (when grouping semantic similar tests for instance), a _FullSystemTestSuite_ need to be used, grouping the remaining test suites.
. *Naming Convention:* System tests must end with _TestCases_. Employing alternatives ending names is discouraged, specially endings such as _Test_ or _TestCase_.
. *Test Categories:* Tests categories might be used if needed, although are discouraged. However, if used, they need to be named as _SystemTest.class_.

TIP: When not using test categories, a test suite might use *@RunWith(Suite.class)* before the list of classes within the suite itself. Thus, all listed test classes are executed and any test category is needed.

==== Packages and Files

System test files need to be kept in specific packages as follows:

. *org.mule.modules.<connector-project>.automation.system* contains the system test cases exclusively.

==== Topic to Tests with System Tests

1. *Test Connectivity:* These tests aim at running the _TestConnectivity_ operation by covering the internal logic of the method itself, which differs from testing the annotation used. A single test case is accepted for each connection configuration, named as _<ConfigName>TestCases_, which will contains as many tests as set of credentials are used.

===== Test Connectivity

These tests aim at testing the logic under the @TestConnectivity annotated method. To do so, let's consider the following connector example and its connection configuration.

[source,java]
----
@ConnectionManagement(friendlyName="CookBookConnector Basic Connection", configElementNam="config")
public class CookBookBasicConfig {

  @Connect
  public void connect(@ConnectionKey String username, @Password String password){
     ...
  }

  @TestConnectivity
  public void testConnectivity(@ConnectionKey String username, @Password String password){

    //Always call the connect method somewhere within the @TestConnectivity method
    this.connect(username, password);

    //Add extra behavior when testing the connection
  }
...
}
----

In order to test this connection config, the following test is required:

[source,java]
----

import
public class CookBookBasicConfigTestCases {

  private Properties validCredentials;

  private static final Logger logger = Logger.getLogger(CookBookBasicConfigTestCases.class);

  @Before
  public void setup(){

    validCredentials = ConfigurationUtils.getAutomationCredentialsProperties();
  }


   @Test
   public void validCredentialsConnectivityTest throws Exception {

    //Add required extra behavior here if necessary

    final CookBookBasicConfig config = new CookBookBasicConfig();

    String username = validCredentials.getProperty("config.username");
    String password = validCredentials.getProperty("config.password");

    //Call the @TestConnectivity
    config.testConnectivity(username, password);
   }

   @Test
   public void invalidCredentialsConnectivityTest throws Exception {

    //Add required extra behavior here if necessary

    CookBookBasicConfig config = new CookBookBasicConfig();

    //Call the @TestConnectivity
    config.testConnectivity("noUserName", "noPassword");
   }

   @Test
   public void nullCredentialsConnectivityTest throws Exception {

    //Add required extra behavior here if necessary

    CookBookBasicConfig config = new CookBookBasicConfig();

    //Call the @TestConnectivity
    config.testConnectivity(null, null);
   }
}
----

Note that in this case, the _automation-credentials.properties_ file is formed by _<configName>.<placeholder>=<value>_. In this example we have as config name (defined by _configElementName_ paramenter) *cookbookconfig*. This file always goes within _src/test/resources_.

IMPORTANT: The valid credentials need to be the same as with the functional tests, in this case _automation-credentials.properties_.

Connectivity tests need to tests as many scenarios as possible, such as invalid credentials, null parameters, etc.

TIP: _ConfigurationUtils.Java class_ is available within CTF packages.

=== Unit Tests (Optional)

Unit tests aim at assuring the correct behavior of a particular code unit within the connector. Although not a mandatory step within the certification process, different aspects require unit tests instead of functional tests.

==== Test Organization

Functional tests need to be engineered and organized as follows:

. *Test Suites:* Tests suites are not required for unit tests.
. *Naming Convention:* Unit tests should follow JUnit naming conventions, normally ending with _Test_ or _TestCase_. Any other ending will produce Maven Surfire plugin to skip these tests during installation.
. *Test Categories:* Tests categories are not required for unit tests.

==== Packages and Files

Test files need to be kept in specific packages as follows:

. *org.mule.modules.<connector-project>.automation.unit* contains the unit test cases exclusively.

CAUTION: Overriding package organization is only accepted if a unit test need to be contained within the same package of the class under tests, _i.e._ when the class has package visibility.

=== Test Execution

Once all tests have been engineered, they must be executed following a few guidelines:

1. *Functional Tests:* Functional tests must be executed with different Mule runtime environments, assuring the correct integration of the connector with older and current Mule runtimes.
2. *System Tests*: Connectivity tests need to be executed with valid and invalid credentials, covering both success and error cases.
3. *Unit Tests:* All unit tests need to be run with _mvn tests_.

The whole set of test can be executed as _mvn test -Dtest="*Test,*TestSuite"_.

IMPORTANT: *mvn test* must only run unit tests, since the remaining tests (Functional and System tests) need a valid connection and credentials. Without these credentials, tests will fail.

==== Running Functional Tests

The overall idea of functional tests is to ensure backward and forward compatibility in every aspect of a connector. Therefore, the main goal is to execute the functional test suite in as many different Mule runtime environments as possible.

===== Test Setup

There are a few things to consider before running the functional test suite:

. *automation-credentials.properties:* This file stores the connector credentials and authenticated user related information. It is mandatory to have this file within src/test/resources.
. *required-libraries.properties:* This file stores the list of required external Jars or native libraries.

Both these files need to be stored within *<connector-project>/src/test/resources* for running the functional test suite.

IMPORTANT: Be careful of excluding these files when committing changes.

The _required-libraries.properties_ files is only mandatory if external, or native, libraries are required, as explained https://developer.mulesoft.com/docs/display/current/Creating+an+Anypoint+Connector+Project#CreatinganAnypointConnectorProject-AddingNativeLibrariesandJARstoaConnectorBuild[here].

===== Required Test Configurations

The connector must be tested with all available Mule runtimes environments from the _MinMuleVersion_ to the latest runtime (MinMuleVersion is a parameter specifying the minimum supported Mule runtime for a given connector).

. _Mule Runtimes:_ If a connector does not require an Enterprise Mule Runtime (_i.e._ it is not Premium nor Select) it must use *Mule Community Edition Runtimes*, such as 3.5.0, 3.6.0 or 3.7.0. Otherwise, it must use *Mule Enterprise Edition Runtimes*, such as 3.5.3 or 3.6.2.

. _Java Versions for Mule Runtimes:_ Every Mule runtime environment needs to be bound to a particular Java version, in order to comply with Multi-Mule functional testing, as follows: Mule runtimes 3.5.X must use Java 1.6, Mule runtimes 3.6.X must use Java 1.7 and Mule runtimes 3.7.X/3.8.X must use Java 1.7. This can be achieved by configuring the _wrapper.conf_ file within the Mule runtime _conf_ directory and setting _wrapper.java.command=_ accordingly.

==== Testing Using CTF

The Connector Testing Framework allows you to run test suites in a specific Mule runtime environment, as explained https://mulesoft.github.io/connector-testing-framework/[here].

Two extra test properties should be added when running a test suite from the command line:

. Deployment Profile: By using _-Ddeploymentprofile=local_, CTF will run the test suite in a remote Mule runtime environment.
. Mule Directory: By using _-Dmuledirectory:<mule-directory>_, CTF will use the available mule runtime to run a test suite if _-Ddeploymentprofile=local_ is used.

Using a simple Maven command from the connector's root folder, and with *Devkit 3.8.0 enabled* you can perform tests on the connector in the runtime specified in your *local profile*, *embedded runtime* or an *available CloudHub runtime* version.

[NOTE]
The fact that libraries change on CloudHub increases the potential for *incompatibility* between the Mule runtime version and your DevKit-based connector.

===== Deployment Profile Configuration

Pass the desired connector application deployment details as arguments to a single Maven command, specifying the environments you want to test your connector in. All arguments should be in lowercase.

If you do not specify `-Ddeploymentprofile`, the CTF runs by default in embedded mode.

===== Embedded Mode

Specifying only `mvn clean test` would run the functional tests in _embedded_ mode, depending on the DevKit version. You are not required to have a Mule server to run the application in this mode.

Running `mvn clean test` is the same as running:

----
mvn clean test -Ddeploymentprofile=embedded
----

===== Local Mode

Running CTF in Local mode means loading the Mule application deployment specification from your user profile and running the test remotely. To test a connector using your local profile's runtime, the argument `-Ddeploymentprofile` *must* be set in the `/local` folder. For example, the command would be structured like:
//todo: anywhere in /local, or does it have to be /local/usr/?

----
mvn clean test -Ddeploymentprofile= -Dmuledirectory=/local/usr/mule_3.6.3
----


===== CloudHub Mode

As of DevKit 3.8.0, CTF support for a CloudHub deployment profile is available, allowing you to test your connector in a more dynamic environment, a clear advantage to deploying a Mule application in a classic standalone environment. The two required parameters, besides specifying `-Ddeploymentprofile=cloudhub`, are your CloudHub username `-Dcloudhubuser=` and `-Dcloudhubpassword=`.

----
mvn clean test -Ddeploymentprofile=cloudhub -Dcloudhubuser=<your_username> -Dcloudhubpassword=<your_password>
----

==== Optional Parameters

When testing on CloudHub, you may specify the Mule version to run connector tests on, as well as the CloudHub URL and the CloudHub worker type for your instance. See the example below that includes all the required _and_ optional parameters:


[cols=",,"options="header"]
|===
|Optional Parameters|Description
|`muleversion`| Configure the Mule runtime to be used on CloudHub
|`cloudhuburl`| Gives the capability of change the CloudHub instance, by default the CTF deploys to http://anypoint.mulesoft.com/cloudhub/
|`cloudhubworkertype` | Allows you to configure the desired amount of vCores for the Mule application to be generated. The available options are:
`micro` (0.1vCores),
`small` (0.2vCores), `medium` (1vCore), `large` (2vCores), `xlarge` (4vCores)
//todo: check each argument is printed above correctly
|`cloudhubtimeout`| Allows you to configure the timeout of the CloudHub instance where the Mule application is deployed
//todo:check above descrip for accuracy
|===

Example CTF test command:
----
mvn clean test -Ddeploymentprofile=cloudhub -Dcloudhubuser=<your_username> -Dcloudhubpassword=<your_password>
-Dmuleversion=3.7.2
-DcloudhubURL=http://qa.anypointplatform.mulesoft.com/cloudhub
-Dcloudhubworkertype=small
----
