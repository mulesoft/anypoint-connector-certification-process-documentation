[[_sonarqube_eclipse_plugin_setup]]
=== SonarQube Eclipse Plugin Setup

* Open Anypoint™ Studio, then select Help > Install New Software.
+
image::images/sonar-3.png[]
+
* In the Work with text box, fill in the update site URL:
SonarQube Integration for Eclipse (update-site) - http://downloads.sonarsource.com/eclipse/eclipse/
+
image::images/sonar-4.png[]
+
* Check the SonarQube Java option.
* After completing the installation, restart Anypoint™ Studio.
* Open Anypoint™ Studio’s preferences, and browse to the SonarQube section. Expand it, and select the Servers subsection. Click Add and fill in the URL and credentials for your server (by default, admin/admin).
+
image::images/sonar-5.png[]
+
Click the *Test connection* button to ensure that your settings are correct.

* To associate your project on the SonarQube server, perform a full analysis once. You can do this by running mvn sonar:sonar in your Connector project.
+
You should perform this full analysis from a machine that is on the same network as the SonarQube database, otherwise it might take very long to complete.
+
When your project finishes analyzing, in Studio right-click your connector project and click *Configure > Associate with SonarQube*. Because your project was analyzed with Maven, the association detects automatically.
+
image::images/sonar-6.png[]


* After association, your project is analyzed with SonarQube and the results are shown on the SonarQube issues tab. Also, the Package Explorer and file editor display error and warning icons according to the issues on your project.

+
New issues introduced since the previous analysis are marked as errors, while existing issues are marked as warnings. This is a cosmetic difference only, which helps to highlight new technical debt being introduced in your code before you check it in.

* To analyse your project again, right-click it and click *SonarQube > Analyse*.
